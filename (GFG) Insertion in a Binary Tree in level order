  /* https://www.geeksforgeeks.org/insertion-in-a-binary-tree-in-level-order/  */
  
#include<iostream>
#include<queue>
using namespace std;

struct node
{
    int data;
    node* left;
    node* right;
};

node* createnode(int data)
{
    node* newnode = new node();
    if(newnode==NULL)
        cout<<"Memory not allocated";

    newnode->data = data;
    newnode->left = NULL;
    newnode->right = NULL;
    return newnode;
}

node* insertnode(node* root, int data)
{
    queue<node*> q;
    q.push(root);

    while(!q.empty())
    {
        node* temp = q.front();
        q.pop();

        if(temp->left!=NULL)
            q.push(temp->left);
        else{
            temp->left = createnode(data);
            return root;
        }

        if(temp->right!=NULL)
            q.push(temp->right);
        else{
            temp->right = createnode(data);
            return root;
        }

    }
}

void inorder(node* root)
{
    if(root==NULL)
        return;

    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);

}

int main()
{
    node* root = createnode(10);
    root->left = createnode(11);
    root->right = createnode(9);
    root->left->left = createnode(7);
    root->right->right = createnode(8);
    root->right->left = createnode(15);

    cout<<"INORDER TRAVERSAL BEFORE INSERTION :";
    inorder(root);

    insertnode(root,45);

    cout<<"INORDER TRAVERSAL AFTER INSERTION :";
    inorder(root);
    return 0;
}

